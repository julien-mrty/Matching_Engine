syntax = "proto3";

package matching_engine_service.v1;

message Order {
  string order_id = 1;
  string client_id = 2;
  int64 price = 3; // scaled integer
  int32 scale = 4; // number of decimal places: 4 => 0.0001
  int32 quantity = 5;
  enum Side { BUY = 0; SELL = 1; }
  Side side = 6;
}

message MarketDataRequest {
  string symbol = 1;
}

service MatchingEngineService {
  rpc SubmitOrder (OrderRequest) returns (OrderResponse);
  rpc GetOrderBook (OrderBookRequest) returns (OrderBookResponse);
  rpc StreamMarketData (MarketDataRequest) returns (stream MarketDataUpdate);
  // Client subscribes to receive updates about its own orders
  rpc StreamOrderUpdates(OrderUpdatesRequest) returns (stream OrderUpdate);
}

message OrderRequest {
  string client_id = 1;
  string symbol = 2;
  enum OrderType { LIMIT = 0; MARKET = 1; }
  OrderType order_type = 3;
  enum Side { BUY = 0; SELL = 1; }
  Side side = 4;
  int64 price = 5; // scaled integer
  int32 scale = 6; // number of decimal places: 4 => 0.0001
  int32 quantity = 7;
}

message OrderResponse {
  string order_id = 1;
  bool success = 2;
  string error_message = 3;
}

message OrderBookRequest {
  string symbol = 1;
}

message OrderBookResponse {
  repeated Order bids = 1;
  repeated Order asks = 2;
}

message MarketDataUpdate {
  string symbol = 1;
  int64 best_bid = 2;
  int64 best_ask = 3;
  int32 scale = 4;
  int32 bid_size = 5;
  int32 ask_size = 6;
}

message OrderUpdatesRequest {
  string client_id = 1;  // identify who weâ€™re interested in
}

message OrderUpdate {
  string order_id = 1;
  string client_id = 2;
  string symbol = 3;
  enum Status {
    NEW = 0;
    PARTIALLY_FILLED = 1;
    FILLED = 2;
    CANCELED = 3;
    REJECTED = 4;
  }
  Status status = 4;
  int64 fill_price = 5;
  int32 scale = 6;
  int32 fill_quantity = 7;
  int32 remaining_quantity = 8;
}