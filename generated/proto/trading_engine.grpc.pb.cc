// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/trading_engine.proto

#include "proto/trading_engine.pb.h"
#include "proto/trading_engine.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* TradingEngine_method_names[] = {
  "/TradingEngine/SubmitOrder",
  "/TradingEngine/GetOrderBook",
  "/TradingEngine/StreamMarketData",
};

std::unique_ptr< TradingEngine::Stub> TradingEngine::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TradingEngine::Stub> stub(new TradingEngine::Stub(channel, options));
  return stub;
}

TradingEngine::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitOrder_(TradingEngine_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrderBook_(TradingEngine_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamMarketData_(TradingEngine_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status TradingEngine::Stub::SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest& request, ::OrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::OrderRequest, ::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitOrder_, context, request, response);
}

void TradingEngine::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest* request, ::OrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::OrderRequest, ::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, std::move(f));
}

void TradingEngine::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest* request, ::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OrderResponse>* TradingEngine::Stub::PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::OrderResponse, ::OrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::OrderResponse>* TradingEngine::Stub::AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingEngine::Stub::GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::OrderBookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::OrderBookRequest, ::OrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrderBook_, context, request, response);
}

void TradingEngine::Stub::async::GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::OrderBookRequest, ::OrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderBook_, context, request, response, std::move(f));
}

void TradingEngine::Stub::async::GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderBook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OrderBookResponse>* TradingEngine::Stub::PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::OrderBookResponse, ::OrderBookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrderBook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::OrderBookResponse>* TradingEngine::Stub::AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrderBookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::MarketDataUpdate>* TradingEngine::Stub::StreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::MarketDataUpdate>::Create(channel_.get(), rpcmethod_StreamMarketData_, context, request);
}

void TradingEngine::Stub::async::StreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest* request, ::grpc::ClientReadReactor< ::MarketDataUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::MarketDataUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamMarketData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::MarketDataUpdate>* TradingEngine::Stub::AsyncStreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MarketDataUpdate>::Create(channel_.get(), cq, rpcmethod_StreamMarketData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MarketDataUpdate>* TradingEngine::Stub::PrepareAsyncStreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MarketDataUpdate>::Create(channel_.get(), cq, rpcmethod_StreamMarketData_, context, request, false, nullptr);
}

TradingEngine::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingEngine_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingEngine::Service, ::OrderRequest, ::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OrderRequest* req,
             ::OrderResponse* resp) {
               return service->SubmitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingEngine_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingEngine::Service, ::OrderBookRequest, ::OrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OrderBookRequest* req,
             ::OrderBookResponse* resp) {
               return service->GetOrderBook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingEngine_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TradingEngine::Service, ::MarketDataRequest, ::MarketDataUpdate>(
          [](TradingEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MarketDataRequest* req,
             ::grpc::ServerWriter<::MarketDataUpdate>* writer) {
               return service->StreamMarketData(ctx, req, writer);
             }, this)));
}

TradingEngine::Service::~Service() {
}

::grpc::Status TradingEngine::Service::SubmitOrder(::grpc::ServerContext* context, const ::OrderRequest* request, ::OrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingEngine::Service::GetOrderBook(::grpc::ServerContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingEngine::Service::StreamMarketData(::grpc::ServerContext* context, const ::MarketDataRequest* request, ::grpc::ServerWriter< ::MarketDataUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


