// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/trading_engine.proto
#ifndef GRPC_proto_2ftrading_5fengine_2eproto__INCLUDED
#define GRPC_proto_2ftrading_5fengine_2eproto__INCLUDED

#include "proto/trading_engine.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

class TradingEngine final {
 public:
  static constexpr char const* service_full_name() {
    return "TradingEngine";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest& request, ::OrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderResponse>> AsyncSubmitOrder(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderResponse>>(AsyncSubmitOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderResponse>> PrepareAsyncSubmitOrder(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderResponse>>(PrepareAsyncSubmitOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::OrderBookResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderBookResponse>> AsyncGetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderBookResponse>>(AsyncGetOrderBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderBookResponse>> PrepareAsyncGetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderBookResponse>>(PrepareAsyncGetOrderBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MarketDataUpdate>> StreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MarketDataUpdate>>(StreamMarketDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MarketDataUpdate>> AsyncStreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MarketDataUpdate>>(AsyncStreamMarketDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MarketDataUpdate>> PrepareAsyncStreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MarketDataUpdate>>(PrepareAsyncStreamMarketDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest* request, ::OrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest* request, ::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest* request, ::grpc::ClientReadReactor< ::MarketDataUpdate>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OrderResponse>* AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OrderResponse>* PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OrderBookResponse>* AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OrderBookResponse>* PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::MarketDataUpdate>* StreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MarketDataUpdate>* AsyncStreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MarketDataUpdate>* PrepareAsyncStreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest& request, ::OrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderResponse>> AsyncSubmitOrder(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderResponse>>(AsyncSubmitOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderResponse>> PrepareAsyncSubmitOrder(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderResponse>>(PrepareAsyncSubmitOrderRaw(context, request, cq));
    }
    ::grpc::Status GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::OrderBookResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderBookResponse>> AsyncGetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderBookResponse>>(AsyncGetOrderBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderBookResponse>> PrepareAsyncGetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderBookResponse>>(PrepareAsyncGetOrderBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::MarketDataUpdate>> StreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MarketDataUpdate>>(StreamMarketDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MarketDataUpdate>> AsyncStreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MarketDataUpdate>>(AsyncStreamMarketDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MarketDataUpdate>> PrepareAsyncStreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MarketDataUpdate>>(PrepareAsyncStreamMarketDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest* request, ::OrderResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitOrder(::grpc::ClientContext* context, const ::OrderRequest* request, ::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrderBook(::grpc::ClientContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamMarketData(::grpc::ClientContext* context, const ::MarketDataRequest* request, ::grpc::ClientReadReactor< ::MarketDataUpdate>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::OrderResponse>* AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OrderResponse>* PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::OrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OrderBookResponse>* AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OrderBookResponse>* PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::OrderBookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::MarketDataUpdate>* StreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request) override;
    ::grpc::ClientAsyncReader< ::MarketDataUpdate>* AsyncStreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MarketDataUpdate>* PrepareAsyncStreamMarketDataRaw(::grpc::ClientContext* context, const ::MarketDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrderBook_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamMarketData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SubmitOrder(::grpc::ServerContext* context, const ::OrderRequest* request, ::OrderResponse* response);
    virtual ::grpc::Status GetOrderBook(::grpc::ServerContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response);
    virtual ::grpc::Status StreamMarketData(::grpc::ServerContext* context, const ::MarketDataRequest* request, ::grpc::ServerWriter< ::MarketDataUpdate>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::OrderRequest* /*request*/, ::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitOrder(::grpc::ServerContext* context, ::OrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::OrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::OrderBookRequest* /*request*/, ::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderBook(::grpc::ServerContext* context, ::OrderBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::OrderBookResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, const ::MarketDataRequest* /*request*/, ::grpc::ServerWriter< ::MarketDataUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamMarketData(::grpc::ServerContext* context, ::MarketDataRequest* request, ::grpc::ServerAsyncWriter< ::MarketDataUpdate>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitOrder<WithAsyncMethod_GetOrderBook<WithAsyncMethod_StreamMarketData<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::OrderRequest, ::OrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::OrderRequest* request, ::OrderResponse* response) { return this->SubmitOrder(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitOrder(
        ::grpc::MessageAllocator< ::OrderRequest, ::OrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::OrderRequest, ::OrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::OrderRequest* /*request*/, ::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::OrderRequest* /*request*/, ::OrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::OrderBookRequest, ::OrderBookResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::OrderBookRequest* request, ::OrderBookResponse* response) { return this->GetOrderBook(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrderBook(
        ::grpc::MessageAllocator< ::OrderBookRequest, ::OrderBookResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::OrderBookRequest, ::OrderBookResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::OrderBookRequest* /*request*/, ::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderBook(
      ::grpc::CallbackServerContext* /*context*/, const ::OrderBookRequest* /*request*/, ::OrderBookResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::MarketDataRequest, ::MarketDataUpdate>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MarketDataRequest* request) { return this->StreamMarketData(context, request); }));
    }
    ~WithCallbackMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, const ::MarketDataRequest* /*request*/, ::grpc::ServerWriter< ::MarketDataUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::MarketDataUpdate>* StreamMarketData(
      ::grpc::CallbackServerContext* /*context*/, const ::MarketDataRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubmitOrder<WithCallbackMethod_GetOrderBook<WithCallbackMethod_StreamMarketData<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::OrderRequest* /*request*/, ::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::OrderBookRequest* /*request*/, ::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, const ::MarketDataRequest* /*request*/, ::grpc::ServerWriter< ::MarketDataUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::OrderRequest* /*request*/, ::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::OrderBookRequest* /*request*/, ::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderBook(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, const ::MarketDataRequest* /*request*/, ::grpc::ServerWriter< ::MarketDataUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamMarketData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::OrderRequest* /*request*/, ::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrderBook(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::OrderBookRequest* /*request*/, ::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderBook(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamMarketData(context, request); }));
    }
    ~WithRawCallbackMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, const ::MarketDataRequest* /*request*/, ::grpc::ServerWriter< ::MarketDataUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamMarketData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::OrderRequest, ::OrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::OrderRequest, ::OrderResponse>* streamer) {
                       return this->StreamedSubmitOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::OrderRequest* /*request*/, ::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OrderRequest,::OrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::OrderBookRequest, ::OrderBookResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::OrderBookRequest, ::OrderBookResponse>* streamer) {
                       return this->StreamedGetOrderBook(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* /*context*/, const ::OrderBookRequest* /*request*/, ::OrderBookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrderBook(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OrderBookRequest,::OrderBookResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitOrder<WithStreamedUnaryMethod_GetOrderBook<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::MarketDataRequest, ::MarketDataUpdate>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::MarketDataRequest, ::MarketDataUpdate>* streamer) {
                       return this->StreamedStreamMarketData(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, const ::MarketDataRequest* /*request*/, ::grpc::ServerWriter< ::MarketDataUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamMarketData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MarketDataRequest,::MarketDataUpdate>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamMarketData<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitOrder<WithStreamedUnaryMethod_GetOrderBook<WithSplitStreamingMethod_StreamMarketData<Service > > > StreamedService;
};


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_proto_2ftrading_5fengine_2eproto__INCLUDED
